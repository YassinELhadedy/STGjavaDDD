package com.nextbit.yassin.stg2.infrastructure.cache;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.nextbit.yassin.stg2.domain.entity.Shipment;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHIPMENT".
*/
public class ShipmentDao extends AbstractDao<Shipment, Long> {

    public static final String TABLENAME = "SHIPMENT";

    /**
     * Properties of entity Shipment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ShipmentBarcode = new Property(1, String.class, "shipmentBarcode", false, "SHIPMENT_BARCODE");
        public final static Property ShipmentPickupid = new Property(2, int.class, "shipmentPickupid", false, "SHIPMENT_PICKUPID");
        public final static Property ConsigneeName = new Property(3, String.class, "consigneeName", false, "CONSIGNEE_NAME");
        public final static Property ConsigneeAdd = new Property(4, String.class, "consigneeAdd", false, "CONSIGNEE_ADD");
        public final static Property SenderName = new Property(5, String.class, "senderName", false, "SENDER_NAME");
        public final static Property Notes = new Property(6, String.class, "notes", false, "NOTES");
        public final static Property ShipmentDate = new Property(7, java.util.Date.class, "shipmentDate", false, "SHIPMENT_DATE");
        public final static Property Cashcollect = new Property(8, float.class, "cashcollect", false, "CASHCOLLECT");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property SheetId = new Property(10, long.class, "sheetId", false, "SHEET_ID");
    }

    private Query<Shipment> sheet_SheetShipmentQuery;

    public ShipmentDao(DaoConfig config) {
        super(config);
    }
    
    public ShipmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHIPMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SHIPMENT_BARCODE\" TEXT NOT NULL ," + // 1: shipmentBarcode
                "\"SHIPMENT_PICKUPID\" INTEGER NOT NULL ," + // 2: shipmentPickupid
                "\"CONSIGNEE_NAME\" TEXT NOT NULL ," + // 3: consigneeName
                "\"CONSIGNEE_ADD\" TEXT NOT NULL ," + // 4: consigneeAdd
                "\"SENDER_NAME\" TEXT NOT NULL ," + // 5: senderName
                "\"NOTES\" TEXT NOT NULL ," + // 6: notes
                "\"SHIPMENT_DATE\" INTEGER NOT NULL ," + // 7: shipmentDate
                "\"CASHCOLLECT\" REAL NOT NULL ," + // 8: cashcollect
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"SHEET_ID\" INTEGER NOT NULL );"); // 10: sheetId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHIPMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shipment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getShipmentBarcode());
        stmt.bindLong(3, entity.getShipmentPickupid());
        stmt.bindString(4, entity.getConsigneeName());
        stmt.bindString(5, entity.getConsigneeAdd());
        stmt.bindString(6, entity.getSenderName());
        stmt.bindString(7, entity.getNotes());
        stmt.bindLong(8, entity.getShipmentDate().getTime());
        stmt.bindDouble(9, entity.getCashcollect());
        stmt.bindLong(10, entity.getStatus());
        stmt.bindLong(11, entity.getSheetId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shipment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getShipmentBarcode());
        stmt.bindLong(3, entity.getShipmentPickupid());
        stmt.bindString(4, entity.getConsigneeName());
        stmt.bindString(5, entity.getConsigneeAdd());
        stmt.bindString(6, entity.getSenderName());
        stmt.bindString(7, entity.getNotes());
        stmt.bindLong(8, entity.getShipmentDate().getTime());
        stmt.bindDouble(9, entity.getCashcollect());
        stmt.bindLong(10, entity.getStatus());
        stmt.bindLong(11, entity.getSheetId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Shipment readEntity(Cursor cursor, int offset) {
        Shipment entity = new Shipment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // shipmentBarcode
            cursor.getInt(offset + 2), // shipmentPickupid
            cursor.getString(offset + 3), // consigneeName
            cursor.getString(offset + 4), // consigneeAdd
            cursor.getString(offset + 5), // senderName
            cursor.getString(offset + 6), // notes
            new java.util.Date(cursor.getLong(offset + 7)), // shipmentDate
            cursor.getFloat(offset + 8), // cashcollect
            cursor.getInt(offset + 9), // status
            cursor.getLong(offset + 10) // sheetId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shipment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShipmentBarcode(cursor.getString(offset + 1));
        entity.setShipmentPickupid(cursor.getInt(offset + 2));
        entity.setConsigneeName(cursor.getString(offset + 3));
        entity.setConsigneeAdd(cursor.getString(offset + 4));
        entity.setSenderName(cursor.getString(offset + 5));
        entity.setNotes(cursor.getString(offset + 6));
        entity.setShipmentDate(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setCashcollect(cursor.getFloat(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setSheetId(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Shipment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Shipment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Shipment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sheetShipment" to-many relationship of Sheet. */
    public List<Shipment> _querySheet_SheetShipment(long sheetId) {
        synchronized (this) {
            if (sheet_SheetShipmentQuery == null) {
                QueryBuilder<Shipment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SheetId.eq(null));
                sheet_SheetShipmentQuery = queryBuilder.build();
            }
        }
        Query<Shipment> query = sheet_SheetShipmentQuery.forCurrentThread();
        query.setParameter(0, sheetId);
        return query.list();
    }

}
